// Generated by gencpp from file my_pkg/my_msg.msg
// DO NOT EDIT!


#ifndef MY_PKG_MESSAGE_MY_MSG_H
#define MY_PKG_MESSAGE_MY_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace my_pkg
{
template <class ContainerAllocator>
struct my_msg_
{
  typedef my_msg_<ContainerAllocator> Type;

  my_msg_()
    : points()
    , another_field(0)
    , obstacle()  {
    }
  my_msg_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , another_field(0)
    , obstacle(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef uint8_t _another_field_type;
  _another_field_type another_field;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _obstacle_type;
  _obstacle_type obstacle;





  typedef boost::shared_ptr< ::my_pkg::my_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_pkg::my_msg_<ContainerAllocator> const> ConstPtr;

}; // struct my_msg_

typedef ::my_pkg::my_msg_<std::allocator<void> > my_msg;

typedef boost::shared_ptr< ::my_pkg::my_msg > my_msgPtr;
typedef boost::shared_ptr< ::my_pkg::my_msg const> my_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_pkg::my_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_pkg::my_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_pkg::my_msg_<ContainerAllocator1> & lhs, const ::my_pkg::my_msg_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points &&
    lhs.another_field == rhs.another_field &&
    lhs.obstacle == rhs.obstacle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_pkg::my_msg_<ContainerAllocator1> & lhs, const ::my_pkg::my_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_pkg::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_pkg::my_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_pkg::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_pkg::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_pkg::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_pkg::my_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_pkg::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f737435e2eebbd28ee7cd6144cb0c7b7";
  }

  static const char* value(const ::my_pkg::my_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf737435e2eebbd28ULL;
  static const uint64_t static_value2 = 0xee7cd6144cb0c7b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_pkg::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_pkg/my_msg";
  }

  static const char* value(const ::my_pkg::my_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_pkg::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] points\n"
"uint8 another_field\n"
"bool[] obstacle\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::my_pkg::my_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_pkg::my_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.another_field);
      stream.next(m.obstacle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_pkg::my_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_pkg::my_msg_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "another_field: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.another_field);
    s << indent << "obstacle[]" << std::endl;
    for (size_t i = 0; i < v.obstacle.size(); ++i)
    {
      s << indent << "  obstacle[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.obstacle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PKG_MESSAGE_MY_MSG_H
